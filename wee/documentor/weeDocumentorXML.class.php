<?php

/*
	Web:Extend
	Copyright (c) 2008 Dev:Extend

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

if (!defined('ALLOW_INCLUSION')) die;

/**
	Builds an XML based on PHP code.
*/

class weeDocumentorXML extends weeDocumentor
{
	/**
		The object used to write the documentor's data in XML format.
	*/

	protected $oXMLWriter;

	/**
		Builds and prints an XML from parsed data.

		@return string The XML generated by this class.
	*/

	public function toString()
	{
		$this->oXMLWriter = new XMLWriter;
		$this->oXMLWriter->openMemory();

		if (defined('DEBUG'))
			$this->oXMLWriter->setIndent(true);

		$this->oXMLWriter->startDocument('1.0', 'utf-8');
		$this->oXMLWriter->startElement('docu');

		if (!empty($this->aClasses))
		{
			usort($this->aClasses, 'weeDocumentor::nameCmp');

			$this->oXMLWriter->startElement('classes');
			foreach ($this->aClasses as $aClass)
				$this->writeClass($aClass);
			$this->oXMLWriter->endElement();
		}

		if (!empty($this->aFuncs))
		{
			usort($this->aFuncs, 'weeDocumentor::nameCmp');

			$this->oXMLWriter->startElement('funcs');
			foreach ($this->aFuncs as $aFunc)
				$this->writeFunc($aFunc, false);
			$this->oXMLWriter->endElement();
		}

		$this->oXMLWriter->endElement();
		return $this->oXMLWriter->flush();
	}

	/**
		Write a class.

		@param $aClass The class' data.
	*/

	protected function writeClass($aClass)
	{
		$this->oXMLWriter->startElement('class');
		$this->oXMLWriter->writeAttribute('name', $aClass['name']);
		$this->oXMLWriter->writeAttribute('filename', $aClass['filename']);
		$this->oXMLWriter->writeAttribute('startline', $aClass['startline']);
		$this->oXMLWriter->writeAttribute('endline', $aClass['endline']);

		if (!empty($aClass['parent'])) $this->oXMLWriter->writeAttribute('parent', $aClass['parent']);
		if (!empty($aClass['type'])) $this->oXMLWriter->writeAttribute('type', $aClass['type']);

		if (!empty($aClass['consts'])) $this->writeConsts($aClass['consts']);
		if (!empty($aClass['implements'])) $this->writeList($aClass['implements'], 'implements', 'implement');

		if (!empty($aClass['bugs'])) $this->writeList($aClass['bugs'], 'bugs', 'bug');
		if (!empty($aClass['sees'])) $this->writeList($aClass['sees'], 'sees', 'see');
		if (!empty($aClass['todos'])) $this->writeList($aClass['todos'], 'todos', 'todo');
		if (!empty($aClass['warnings'])) $this->writeList($aClass['warnings'], 'warnings', 'warning');

		if (!empty($aClass['methods']))
		{
			$this->oXMLWriter->startElement('methods');
			foreach ($aClass['methods'] as $aMethod)
				$this->writeFunc($aMethod, true);
			$this->oXMLWriter->endElement();
		}

		if (!empty($aClass['properties']))
		{
			$this->oXMLWriter->startElement('properties');
			foreach ($aClass['properties'] as $aProperty)
				$this->writeProperty($aProperty);
			$this->oXMLWriter->endElement();
		}

		if (!empty($aClass['comment']))
		{
			$this->oXMLWriter->startElement('comment');
			$this->oXMLWriter->text($aClass['comment']);
			$this->oXMLWriter->endElement();
		}

		$this->oXMLWriter->endElement();
	}

	/**
		Write constants.

		@param $aConsts The constants' data.
	*/

	protected function writeConsts($aConsts)
	{
		$this->oXMLWriter->startElement('consts');
		foreach ($aConsts as $sName => $mValue)
		{
			$this->oXMLWriter->startElement('const');
			$this->oXMLWriter->writeAttribute('name', $sName);
			$this->oXMLWriter->writeAttribute('value', $mValue);
			$this->oXMLWriter->endElement();
		}
		$this->oXMLWriter->endElement();
	}

	/**
		Write a function or a method.

		@param $aFunc The function or method's data.
		@param $bIsMethod Whether the array given is for a method.
	*/

	protected function writeFunc($aFunc, $bIsMethod)
	{
		$this->oXMLWriter->startElement($bIsMethod ? 'method' : 'func');
		$this->oXMLWriter->writeAttribute('name', $aFunc['name']);

		if (!empty($aFunc['filename']))
			$this->oXMLWriter->writeAttribute('filename', $aFunc['filename']);

		if (!$bIsMethod || empty($aFunc['internal']))
		{
			$this->oXMLWriter->writeAttribute('startline', $aFunc['startline']);
			$this->oXMLWriter->writeAttribute('endline', $aFunc['endline']);
		}

		if ($bIsMethod)
		{
			if (!empty($aFunc['type'])) $this->oXMLWriter->writeAttribute('type', $aFunc['type']);
			$this->oXMLWriter->writeAttribute('visibility', $aFunc['visibility']);
			if ($aFunc['internal']) $this->oXMLWriter->writeAttribute('internal', 'internal');
		}

		if (!empty($aFunc['params']))
		{
			$this->oXMLWriter->startElement('params');
			$this->oXMLWriter->writeAttribute('numrequired', $aFunc['numreqparams']);
			foreach ($aFunc['params'] as $aParam)
				$this->writeParam($aParam);
			$this->oXMLWriter->endElement();
		}

		if (!empty($aFunc['bugs'])) $this->writeList($aFunc['bugs'], 'bugs', 'bug');
		if (!empty($aFunc['overloads'])) $this->writeOverloads($aFunc['overloads']);
		if (!empty($aFunc['return'])) $this->writeReturn($aFunc['return']);
		if (!empty($aFunc['sees'])) $this->writeList($aFunc['sees'], 'sees', 'see');
		if (!empty($aFunc['throws'])) $this->writeList($aFunc['throws'], 'throws', 'throw');
		if (!empty($aFunc['todos'])) $this->writeList($aFunc['todos'], 'todos', 'todo');
		if (!empty($aFunc['warnings'])) $this->writeList($aFunc['warnings'], 'warnings', 'warning');

		if (!empty($aFunc['comment']))
		{
			$this->oXMLWriter->startElement('comment');
			$this->oXMLWriter->text($aFunc['comment']);
			$this->oXMLWriter->endElement();
		}

		$this->oXMLWriter->endElement();
	}

	/**
		Write a list of elements.

		@param $aList The list of items to write.
		@param $sParent The name of the parent element that will contain the whole list.
		@param $sChild The name of the child elements that will contain each items.
	*/

	protected function writeList($aList, $sParent, $sChild)
	{
		$this->oXMLWriter->startElement($sParent);
		foreach ($aList as $sItem)
		{
			$this->oXMLWriter->startElement($sChild);
			$this->oXMLWriter->text($sItem);
			$this->oXMLWriter->endElement();
		}
		$this->oXMLWriter->endElement();
	}

	/**
		Write overloads information.

		@param $aOverloads The overloads available for the associated function or method.
	*/

	protected function writeOverloads($aOverloads)
	{
		$this->oXMLWriter->startElement('overloads');
		foreach ($aOverloads as $aOverload)
		{
			$this->oXMLWriter->startElement('overload');
			$this->oXMLWriter->writeAttribute('func', $aOverload['func']);
			$this->oXMLWriter->text($aOverload['comment']);
			$this->oXMLWriter->endElement();
		}
		$this->oXMLWriter->endElement();
	}

	/**
		Write a parameter.

		@param $aParam The parameter's data.
	*/

	protected function writeParam($aParam)
	{
		$this->oXMLWriter->startElement('param');
		$this->oXMLWriter->writeAttribute('name', $aParam['name']);

		if (!empty($aParam['ref'])) $this->oXMLWriter->writeAttribute('ref', 'ref');
		if (!empty($aParam['null'])) $this->oXMLWriter->writeAttribute('null', 'null');

		if (!empty($aParam['default']))
		{
			$sDefault = $aParam['default'];
			if (strlen($sDefault) >= 7 && !substr_compare($sDefault, 'array (', 0, 7))
			{
				if ($sDefault[8] == ')')
					$sDefault = 'array()';
				else
					$sDefault = 'array(' . substr($sDefault, 7);
			}
			$this->oXMLWriter->writeAttribute('default', $sDefault);
		}

		if (!empty($aParam['type'])) $this->oXMLWriter->writeAttribute('type', $aParam['type']);
		if (!empty($aParam['hint'])) $this->oXMLWriter->writeAttribute('hint', $aParam['hint']);
		if (!empty($aParam['comment'])) $this->oXMLWriter->text($aParam['comment']);

		$this->oXMLWriter->endElement();
	}

	/**
		Write a property.

		@param $aProperty The property's data.
	*/

	protected function writeProperty($aProperty)
	{
		$this->oXMLWriter->startElement('property');

		$this->oXMLWriter->writeAttribute('name', $aProperty['name']);
		$this->oXMLWriter->writeAttribute('visibility', $aProperty['visibility']);
		if (!empty($aProperty['static'])) $this->oXMLWriter->writeAttribute('static', 'static');

		if (!empty($aProperty['bugs'])) $this->writeList($aProperty['bugs'], 'bugs', 'bug');
		if (!empty($aProperty['sees'])) $this->writeList($aProperty['sees'], 'sees', 'see');
		if (!empty($aProperty['todos'])) $this->writeList($aProperty['todos'], 'todos', 'todo');
		if (!empty($aProperty['warnings'])) $this->writeList($aProperty['warnings'], 'warnings', 'warning');

		if (!empty($aProperty['comment']))
		{
			$this->oXMLWriter->startElement('comment');
			$this->oXMLWriter->text($aProperty['comment']);
			$this->oXMLWriter->endElement();
		}

		$this->oXMLWriter->endElement();
	}

	/**
		Write details about the return value of a function or method.

		@param $aReturn The return value's details.
	*/

	protected function writeReturn($aReturn)
	{
		$this->oXMLWriter->startElement('return');
		$this->oXMLWriter->writeAttribute('type', $aReturn['type']);

		if (!empty($aReturn['ref'])) $this->oXMLWriter->writeAttribute('ref', 'ref');
		if (!empty($aReturn['comment'])) $this->oXMLWriter->text($aReturn['comment']);

		$this->oXMLWriter->endElement();
	}
}
