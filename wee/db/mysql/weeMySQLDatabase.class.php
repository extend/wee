<?php

/*
	Web:Extend
	Copyright (c) 2006-2008 Dev:Extend

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

if (!defined('ALLOW_INCLUSION')) die;

/**
	MySQL database driver.
*/

class weeMySQLDatabase extends weeDatabase
{
	/**
		Link resource for this database connection.
	*/

	protected $rLink;

	/**
		Initialises a new mysql database.

		This database driver accepts the following parameters:
		 - host:		The host of the database server.
		 - user:		The user of the connection to the database.
		 - password:	The password used by the user.
		 - dbname:		The name of the database to select.
		 - encoding:	The encoding to use for the database connection.

		Refer to the documentation of mysql_connect() to know the default values
		of the `host`, `user` and `password` parameters.

		@param	$aParams					The parameters of the database.
		@throw	ConfigurationException		The MySQL PHP extension is missing.
		@throw	DatabaseException			MySQL failed to connect to the specified database.
		@throw	InvalidArgumentException	The value of the `encoding` parameter is invalid.
	*/

	public function __construct($aParams = array())
	{
		function_exists('mysql_connect')
			or burn('ConfigurationException',
				_WT('The MySQL PHP extension is required by the MySQL database driver.'));

		$this->rLink = @mysql_connect(array_value($aParams, 'host'), array_value($aParams, 'user'), array_value($aParams, 'password'));
		$this->rLink !== false
			or burn('DatabaseException',
				_WT('MySQL failed to connect to the database with the following message:')
					. "\n" . mysql_error());

		if (isset($aParams['encoding']))
			try
			{
				$this->query("SET NAMES ?", $aParams['encoding']);
			}
			catch (DatabaseException $e)
			{
				burn('InvalidArgumentException',
					sprintf(_WT('Encoding "%s" is invalid.'), $aParams['encoding']));
			}

		if (isset($aParams['dbname']))
			$this->selectDb($aParams['dbname']);
	}

	/**
		Executes an SQL query.

		@param	$sQuery			The query to execute.
		@return	weeMySQLResult	Only with SELECT queries: an object for results handling
	*/

	protected function doQuery($sQuery)
	{
		$mResult = mysql_query($sQuery, $this->rLink);
		$mResult !== false
			or burn('DatabaseException',
				_WT('MySQL failed to execute the given query with the following message:')
			   		. "\n" . $this->getLastError());

		if ($mResult !== true)
			return new weeMySQLResult($mResult);
	}

	/**
		Escapes the given value for safe concatenation in an SQL query.
		You should not build query by concatenation if possible (see query).
		You should NEVER use sprintf when building queries.

		@param	$mValue	The value to escape.
		@return	string	The escaped value, wrapped around simple quotes.
	*/

	public function escape($mValue)
	{
		if ($mValue === null)
			return 'null';
		elseif ($mValue instanceof Printable)
			$mValue = $mValue->toString();
		elseif (is_float($mValue))
		{
			$sFormerLocale = setlocale(LC_NUMERIC, 'C');
			$mValue = (string)$mValue;
			setlocale(LC_NUMERIC, $sFormerLocale);
		}

		return "'" . mysql_real_escape_string($mValue, $this->rLink) . "'";
	}

	/**
		Escape the given identifier for safe concatenation in an SQL query.

		@param	$sValue	The identifier to escape.
		@return	string	The escaped identifier, wrapped around ticks.
	*/

	public function escapeIdent($sValue)
	{
		fire(
			empty($sValue) || strpos($sValue, "\0") !== false || strpos($sValue, chr(255)) !== false || !substr_compare($sValue, ' ', -1) || strlen($sValue) > 64,
			'InvalidArgumentException',
			_WT('$sValue is not a valid mysql identifier.')
		);

		return '`' . str_replace('`', '``', $sValue) . '`';
	}

	/**
		Gets the last error the database returned.
		The drivers usually throw an exception when there's an error,
		but you can get the error if you catch the exception and then call this method.

		@return string The last error the database encountered
	*/

	public function getLastError()
	{
		return mysql_error($this->rLink);
	}

	/**
		Returns the name of the mysql dbmeta class.

		@param	mixed	The name of the mysql dbmeta class.
	*/

	public function getMetaClass()
	{
		return 'weeMySQLDbMeta';
	}

	/**
		Returns the value generated by the last INSERT query for an AUTO_INCREMENT column.

		@param	$sName					Unused in this database driver.
		@return	string					The last value generated.
		@throw	IllegalStateException	None of the previous queries generated an AUTO_INCREMENT value.
	*/

	public function getPKId($sName = null)
	{
		// Do not use mysql_insert_id() here because it cannot handle BIGINT values.
		$s = $this->queryValue('SELECT LAST_INSERT_ID()');
		$s != '0'
			or burn('IllegalStateException',
				_WT('None of the previous executed queries generated an AUTO_INCREMENT value.'));
		return $s;
	}

	/**
		Returns the number of affected rows in the last INSERT, UPDATE or DELETE query.
		You can't use this method safely to check if your UPDATE executed successfully,
		since the UPDATE statement does not always update rows that are already up-to-date.

		@return	int	The number of affected rows by the last query.
	*/

	public function numAffectedRows()
	{
		return mysql_affected_rows($this->rLink);
	}

	/**
		Prepares an SQL query statement.

		@param	$sQuery				The query string.
		@return	weeMySQLStatement	The prepared statement.
	*/

	public function prepare($sQuery)
	{
		return new weeMySQLStatement($this, $sQuery);
	}

	/**
		Changes database without reconnecting.
		The new database must be on the same host of the previous.

		@param	$sDatabase			The database to use.
		@throw	DatabaseException	MySQL failed to select the database.
	*/

	public function selectDb($sDatabase)
	{
		$b = mysql_select_db($sDatabase, $this->rLink);
		$b
			or burn('DatabaseException',
				sprintf(_WT('MySQL failed to select the database "%s" with the following message:'), $sDatabase)
					. "\n" . $this->getLastError());
	}
}
