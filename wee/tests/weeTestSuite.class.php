<?php

/*
	Web:Extend
	Copyright (c) 2006, 2008 Dev:Extend

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

if (!defined('ALLOW_INCLUSION')) die;

/**
	Automated unit testing.

	Unit test cases that return false value will be ignored.
	Use it if you need additional files that are not unit test cases.
*/

abstract class weeTestSuite implements Printable
{
	/**
		Path to the unit test cases.
	*/

	protected $sTestsPath;

	/**
		Extended data generated by the unit test suite.
	*/

	protected $aExtData = array();

	/**
		Array containing the results of the unit test suite, after its completion.
	*/

	protected $aResults = array();

	/**
		Initialize the test suite by setting the path to the unit test cases.

		@param $sTestsPath Path to the unit test cases.
	*/

	public function __construct($sTestsPath)
	{
		if (defined('WEE_ON_WINDOWS'))
			$this->sTestsPath = realpath(getcwd()) . '\\' . str_replace('/', '\\', $sTestsPath);
		else
			$this->sTestsPath = $_SERVER['PWD'] . '/' . $sTestsPath;
	}

	/**
		Adds a result to the result array.
		
		Results must be either "success" or "skip" or an Exception.

		@param	$sFile			The filename of the unit test case.
		@param	$mResult		The result of the unit test case.
		@throw	DomainException	$mResult is not a valid result.
	*/

	protected function addResult($sFile, $mResult)
	{
		$mResult == 'success' or $mResult == 'skip' or is_object($mResult) and $mResult instanceof Exception
			or burn('DomainException',
				_('$mResult is not a valid result.'));

		$this->aResults[$sFile] = $mResult;
	}

	/**
		Runs the test suite.
	*/

	public function run()
	{
		$iFormerErrorReporting	= error_reporting(E_ALL | E_STRICT);
		$mFormerErrorHandler	= set_error_handler(create_function(
			'$iLevel, $sMessage, $sFile, $iLine',
			'if (error_reporting())
				throw new ErrorTestException($sMessage, $iLevel, $sFile, $iLine);'
			));

		$oDirectory	= new RecursiveDirectoryIterator($this->sTestsPath);
		foreach (new RecursiveIteratorIterator($oDirectory) as $sPath)
		{
			$sPath = (string)$sPath;

			// Skip files already included
			if (in_array($sPath, get_included_files()))
				continue;

			// Skip files not ending with .php
			if (substr($sPath, -strlen(PHP_EXT)) != PHP_EXT)
				continue;

			try
			{
				$oTest = new weeUnitTestCase($sPath);
				$bRes = $oTest->run();
				if (!$bRes) continue;

				$this->addResult($sPath, 'success');

				if ($oTest->hasExtData())
					$this->aExtData[$sPath] = $oTest->getExtData();
			}
			catch (SkipTestException $o)
			{
				$this->addResult($sPath, 'skip');
			}
			catch (Exception $o)
			{
				$this->addResult($sPath, $o);
			}
		}

		error_reporting($iFormerErrorReporting);
		if ($mFormerErrorHandler)
			set_error_handler($mFormerErrorHandler);
		else
			restore_error_handler();
	}
}
