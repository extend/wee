<?php

/*
	Web:Extend
	Copyright (c) 2006-2010 Dev:Extend

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

if (!defined('ALLOW_INCLUSION')) die;

/**
	Unit test case.

	Most of the time it is not needed to use it manually, since weeTestSuite does everything for you.
*/

class weeUnitTestCase
{
	/**
		Extended data generated by the tests.
	*/

	protected $aExtData = array();

	/**
		Filename of the unit test case.
	*/

	protected $sFilename;

	/**
		Creates a test case based on the given filename.

		@param $sTestFilename Filename to the unit test file.
	*/

	public function __construct($sTestFilename)
	{
		$this->sFilename = $sTestFilename;
	}

	/**
		Append an array of data to the extended data array.

		If more than one value is found, values' name are numbered.

		@param $sName Name for the values to be added.
		@param $aIteratedData Data to iterate through.
	*/

	protected function addExtArray($sName, $aIteratedData)
	{
		$bNumbered = count($aIteratedData) > 1;
		$sNumber = null;
		$i = 0;

		foreach ($aIteratedData as $mValue)
		{
			if ($bNumbered)
				$sNumber = ' ' . $i++;

			$this->aExtData[] = array($sName . $sNumber, (array)$mValue);
		}
	}

	/**
		Append a value to the extended data array.

		@param $sName Name for the value to be added.
		@param $mValue Value to be added to the extended data array.
	*/

	protected function addExtValue($sName, $mValue)
	{
		$this->aExtData[] = array($sName, $mValue);
	}

	/**
		Checks whether the actual value of the test is equal to the expected value.

		@param	$mExpected				The expected value.
		@param	$mActual				The actual value of the test.
		@param	$sMessage				The error message used if the test fails.
		@throw	ComparisonTestException	Thrown when the test fails.
	*/

	protected function isEqual($mExpected, $mActual, $sMessage)
	{
		if ($mExpected != $mActual)
			throw new ComparisonTestException($mExpected, $mActual, $sMessage);
	}

	/**
		Check whether $mVar is false.

		@param $sMessage Error message if test returns false.
	*/

	protected function isFalse($mVar, $sMessage)
	{
		if ($mVar)
			throw new ComparisonTestException(false, $mVar, $sMessage);
	}

	/**
		Checks whether the actual value of the test is identical to the expected value.

		@param	$mExpected				The expected value.
		@param	$mActual				The actual value of the test.
		@param	$sMessage				The error message used if the test fails.
		@throw	ComparisonTestException	Thrown when the test fails.
	*/

	protected function isIdentical($mExpected, $mActual, $sMessage)
	{
		if ($mExpected !== $mActual)
			throw new ComparisonTestException($mExpected, $mActual, $sMessage);
	}

	/**
		Checks whether the given object is an instance of a given class.

		@param	$oObject				The object.
		@param	$sClass					The class.
		@param	$sMessage				The error message used if the test fails.
		@throw	DomainException			$oObject is not an object.
		@throw	ComparisonTestException	Thrown when the test fails.
	*/

	protected function isInstanceOf($oObject, $sClass, $sMessage)
	{
		is_object($oObject)
			or burn('DomainException',
				_WT('$oObject is not an object.'));

		if (!($oObject instanceof $sClass))
			throw new ComparisonTestException($sClass, get_class($oObject), $sMessage);
	}

	/**
		Check whether pattern $sPattern is found in $sSubject.

		@param $sMessage Error message if test returns false.
	*/

	protected function isMatching($sPattern, $sSubject, $sMessage)
	{
		if (0 === preg_match($sPattern, $sSubject))
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether $mVarLeft != $mVarRight.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNotEqual($mVarLeft, $mVarRight, $sMessage)
	{
		if ($mVarLeft == $mVarRight)
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether $mVarLeft !== $mVarRight.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNotIdentical($mVarLeft, $mVarRight, $sMessage)
	{
		if ($mVarLeft === $mVarRight)
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether $oObject is NOT an instance of $sClass.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNotInstanceOf($oObject, $sClass, $sMessage)
	{
		if ($oObject instanceof $sClass)
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether pattern $sPattern is NOT found in $sSubject.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNotMatching($sPattern, $sSubject, $sMessage)
	{
		if (1 === preg_match($sPattern, $sSubject))
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether $mVar is NOT null.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNotNull($mVar, $sMessage)
	{
		if (is_null($mVar))
			throw new UnitTestException($sMessage);
	}

	/**
		Check whether $mVar is null.

		@param $sMessage Error message if test returns false.
	*/

	protected function isNull($mVar, $sMessage)
	{
		if ($mVar !== null)
			throw new ComparisonTestException(null, $mVar, $sMessage);
	}

	/**
		Check whether $mVar is true.

		@param $sMessage Error message if test returns false.
	*/

	protected function isTrue($mVar, $sMessage)
	{
		if (!$mVar)
			throw new ComparisonTestException(true, $mVar, $sMessage);
	}

	/**
		Fails a test.

		@param $sMessage Error message.
	 */

	protected function fail($sMessage)
	{
		throw new UnitTestException($sMessage);
	}

	/**
		Returns the extended data generated by the unit test.

		@return array The extended data generated by the unit test case.
	*/

	public function getExtData()
	{
		return $this->aExtData;
	}

	/**
		Returns whether the test generated extended data which can be used for debugging
		or for printing performance or scalability information.

		@return bool Whether the test generated extended data.
	*/

	public function hasExtData()
	{
		return !empty($this->aExtData);
	}

	/**
		Runs this unit test case.

		If code coverage is enabled, send the code coverage data as extended data.

		@return bool True if test completed, false it must be skipped.
	*/

	public function run()
	{
		if (defined('WEE_CODE_COVERAGE')) {
			function_exists('xdebug_enable') or burn('ConfigurationException',
				_WT('The XDebug PHP extension is required for code coverage analysis.'));
			xdebug_start_code_coverage(XDEBUG_CC_UNUSED | XDEBUG_CC_DEAD_CODE);
		}

		require($this->sFilename);

		if (defined('WEE_CODE_COVERAGE')) {
			$this->addExtValue('weeCoveredCode', xdebug_get_code_coverage());
			xdebug_stop_code_coverage();
		}
	}

	/**
		Skip a test.
	*/

	protected function skip()
	{
		throw new SkipTestException;
	}
}
