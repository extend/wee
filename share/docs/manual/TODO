This file contains the documentation that was removed when converting
to the DocBook format.



<!--

== Helping the Users ==

=== API ===

The [http://api.extend.ws/ API] is automatically generated using the [wiki:Documentation/Tools/API make api command]. The API is actually an XML file. An HTML page is provided with it to read and render it. You could easily write your own tools to query the API. There is two advantages to this approach. The first is that any developer can generate this file automatically without anything other than the framework itself. Meaning you can find help easily even if you can't access Internet. The second advantage is that this file is loaded only once. You don't have to wait to get your help if the API server is busy.

=== Documentation ===

The documentation aims to provide a complete reference for the Web:Extend framework. When completed (for the final release), it will explain not only how to use the framework, but also its internals. The documentation will provide a good amount of tutorials each building an application demonstrating one or more concepts provided by the framework.

We wish to provide a great documentation, but to reach this goal we need your input. Please send us comments about things we need to clarify, things we have forgotten, errors, typos, so that we can improve it. Comments are always welcome.

You can also get good information from the [http://blog.extend.ws blog].

=== Getting Help ===

If you need to get direct help, you can try asking on the [irc://irc.freenode.net/webextend IRC channel] or the [http://groups.google.com/group/wee-users Mailing List]. We will always be there to reply to any question you might have. Do not wait too long if you have a problem, come ask us directly!

----

[[AddComment(appendonly)]]
-->





[[TOC]]

= Features =

== Components ==

 * Application
  * Architecture derivated from MVC, implemented with a passive view
  * [http://taconite.sourceforge.net Taconite] integration for transparent AJAX
 * Database abstraction
  * MySQL, PostgreSQL, SQLite and Oracle adapters
  * Named parameters (implicit or explicit)
  * Meta information retrieval
 * LDAP abstraction
 * Integrated unit testing
 * Integrated API documentation generator
 * Emails
  * Using [http://phpmailer.sourceforge.net phpMailer]
  * Email templates
 * Improved file upload handling
 * Improved session handling
 * Authentification drivers
  * Database table authentification
 * Internationalization
  * UTF-8 support
 * Template system
  * Supports cached templates
 * PDF generation using LaTeX
 * XML-based form handling
  * Form generation using XSLT
  * Input validation

== Language ==

 * [http://en.wikipedia.org/wiki/Object-oriented_programming Oriented-object programming]
 * Use [http://php.net/manual/en/language.oop5.php advanced PHP5 features]
 * Use [http://php.net/manual/en/language.exceptions.php exceptions] for error handling
 * Use [http://php.net/manual/en/ref.spl.php SPL] and [http://php.net/manual/en/ref.simplexml.php SimpleXML] extensions
 * Use the PHP language for template processing

== Security ==

 * Automatically prevent:
  * [http://en.wikipedia.org/wiki/Cross-site_request_forgery Cross-site request forgery]
  * [http://en.wikipedia.org/wiki/Cross-site_scripting Cross-site scripting]
  * [http://en.wikipedia.org/wiki/HTTP_response_splitting HTTP response splitting]
  * [http://en.wikipedia.org/wiki/Session_fixation Session fixation]
  * [http://en.wikipedia.org/wiki/SQL_injection SQL injection]
 * Facilitates the [http://php.net/manual/en/security.variables.php validation of user input]

----

[[AddComment(appendonly)]]







[[TOC(Documentation/Modules/Application*)]]

= Application Module =

The application module encapsulate the controller aspect of the MVC design pattern. It uses a file for its configuration, translate the HTTP requests received by the server and execute the appropriate methods. The controller has been separated in two distinct parts: the application and the frames. The application part is fully handled by the framework, while the frames are to be written by the developer.

The controller translate requests into events. An event is defined by its name, the name of the frame containing the event, an optional pathinfo, GET and POST data, a request method and a context. It is stored in an array.

The names of the frame and the event are retrieved from the PATH_INFO. The PATH_INFO is the part after the file/folder name in a query. For example, in `http://www.example.com/index.php/this/is/a/path/info`, the PATH_INFO is `/this/is/a/path/info`. By default, the PATH_INFO is divided in three parts: `/frame/event/pahtinfo`. All are optional, however. If no event name is given, the event will be processed by the frame's default event. If no frame is given, the event will be processed by the default frame, `toppage`. Note that you can customize this operation by [wiki:Documentation/Modules/Application/Routing defining custom routes].

The request method is the method which was used to access the page (e.g. GET, POST) in lowercase and the context can be either `http` or `xmlhttprequest` to help differentiate between normal and AJAX requests.

CLI is also supported by the module. The context is `cli` when the script is called from command line. Furthermore, if the script is called with a standard input, the request method will be `put` or otherwise `get`.

== Flowchart ==

When the server receives a request, it is processed according to this detailed flowchart:

[[Image(app-flowchart.png)]]
