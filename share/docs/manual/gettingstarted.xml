<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="gettingstarted">
	<title>Getting started</title>

	<sect1 id="gettingstarted_requirements">
		<title>Requirements</title>
		<para>
			Web:Extend currently requires at least PHP 5.2.
			It might work with an older version, but we can not give any guarantee about it.
			It requires the <ulink url="http://php.net/spl">SPL extension</ulink> to be enabled (it is by default).
		</para>
		<para>
			Other requirements depends on the modules you intend to use.
			We recommend you to enable at least <ulink url="http://php.net/intl">intl</ulink>,
			<ulink url="http://php.net/simplexml">SimpleXML</ulink> and <ulink url="http://php.net/xsl">XSL</ulink>,
			along with the extension for the database you intend to use.
			Most of the common databases are supported.
		</para>
	</sect1>

	<sect1 id="gettingstarted_installation">
		<title>Installation</title>
		<para>
			You can download Web:Extend from <ulink url="http://github.com/essen/wee/downloads">GitHub</ulink>.
		</para>
		<para>
			The only extra installation step required after getting the source is to make
			the <filename>app/tmp</filename> folder writable by the web server.
		</para>
		<para>
			Before starting any development you are advised to uncomment the <literal>DEBUG</literal>
			line in the <filename>index.php</filename> file.
		</para>
	</sect1>

	<sect1 id="gettingstarted_layout">
		<title>Directory layout</title>
		<para>
			Every important project must have a decent directory layout to be maintained easily.
			A good directory layout enables a team to communicate and work together easily and allows newcomers to get into it in little time.
		</para>

		<programlisting> <!-- TODO: image? -->
project/
	app/			Project-specific files.
		cli/		The command-line interface tools for this application.
		conf/		Configuration files of the application.
		form/		The form definitions of the application.
		locale/		The gettext objects for localization.
		php/		The php code of the project like frames and model.
		sql/		The database schema, upgrade scripts and other SQL files.
		tmp/		Temporary files generated by the application, like the various cache files.
		tpl/		The templates of the application.
	pub/			This directory should hold any resources directly accessible to the user, like stylesheets and images.
	res/			Public resources distributed with the framework.
	share/
	tools/
	wee/			The Web:Extend framework.
		vendor/		The third party libraries embedded in the framework.
	index.php		The frontend of the application.
		</programlisting>

		<para>
			Directory names should be lowercase and the shortest possible.
			Project-specific files should only be found in <filename>app</filename> and <filename>pub</filename>.
			The only accessible folders from the World Wide Web should be <filename>pub</filename> and <filename>res</filename>.
			The bootstrap file <filename>index.php</filename> can be modified to fit the needs of the application.
		</para>

		<para>
			As you can see, the framework do not enforce any layout for your PHP and template files.
			There are several choices you can make depending on your application.
			We will highlight a few of them here.
			Note that if you use the form module, you can use the same layout for the forms as you would for the template files.
		</para>

		<sect2>
			<title>Small application layout</title>
			<para>
				If you are writing a small application you'll probably want to keep it as simple as possible.
				Use the following recommendations in this case:
				<itemizedlist>
					<listitem><para>store all template and form files at the root of their folders</para></listitem>
					<listitem><para>* store the domain model in app/php/model, the frames in app/php/frames and the other PHP files directly in app/php</para></listitem>
				</itemizedlist>
			</para>
		</sect2>

		<sect2>
			<title>Modular layout</title>
			<para>
				If your application is modular, you need a better layout.
				For example you could write a blog application, with a public interface and an administration interface.
				Those two interfaces are two different parts of your application that do not depend on each other to work correctly.
				The two are related only because they work on the same data, accessed using the domain model classes.
			</para>
			<para>
				Since you have modules, you could store all the related files into their own module folders.
				You would have a layout similar to this one for a blog application:
				<programlisting> <!-- TODO: image? -->
app/form/
	admin/
	public/
app/php/
	admin/
	model/
	public/
app/tpl/
	admin/
	public/
				</programlisting>
			</para>
		</sect2>

		<sect2>
			<title>Third party libraries</title>
			<para>
				If you use other libraries in your project, you should have a special folder <filename>app/php/vendor</filename> to store them.
				You could have for example <filename>app/php/vendor/zendframework</filename>
				that would contain the <ulink url="http://framework.zend.com">Zend Framework</ulink> files used in your project.
			</para>
		</sect2>

		<sect2>
			<title>Database versioning</title>
			<para>
				It is highly recommended to keep your database schema under version control.
				You are also advised to keep upgrade scripts from one version to another when you make changes to the database schema.
				It will make updating the projet much easier when you work in a team or when you need to put your changes into production.
				You can use the folder <filename>app/sql</filename> for this purpose.
			</para>
			<para>
				Software exists to manage and version database changes. We have no knowledge on which is better than others though.
				If you're not going to use any of them then at least try to follow our recommandations.
			</para>
			<para>
				Always version your database changes. It doesn't have to be the same as the repository version.
				Just start from version 1 and increment with each change.
				Then, include the number of the version of the database an upgrade script will upgrade from in its filename.
			</para>
			<para>
				We recommend using the following naming convention for your SQL files:
				<itemizedlist>
					<listitem><para>the schema file must have a simple name, for example <filename>schema.sql</filename></para></listitem>
					<listitem><para>the upgrade files are then named <filename>upgrade.1.sql</filename>, <filename>upgrade.2.sql</filename> and so on</para></listitem>
				</itemizedlist>
			</para>
			<para>
				When you need to use more than one database, you can tweak the naming convention this way:
				<itemizedlist>
					<listitem><para>use for example <filename>schema.backend.sql</filename> and <filename>schema.frontend.sql</filename> instead of <filename>schema.sql</filename> for your different schemas</para></listitem>
					<listitem><para>use <filename>upgrade.backend.1.sql</filename> and <filename>upgrade.backend.2.sql</filename> for your upgrade scripts for the first schema, same with <filename>upgrade.frontend.x.sql</filename></para></listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>

	<sect1 id="gettingstarted_helloworld">
		<title>Hello, world</title>
		<para>
			TODO
		</para>
	</sect1>
</chapter>
