<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="gettingstarted">
	<title>Getting started</title>

	<sect1 id="gettingstarted_requirements">
		<title>Requirements</title>
		<para>
			Web:Extend currently requires PHP 5.2.
			It may function with an older version of PHP, but we can provide no guarantee of this.
			Additionally, it requires the <ulink url="http://php.net/spl">SPL extension</ulink> to be
		   	enabled (which is the default configuration).
		</para>
		<para>
			Other requirements depend on the modules you intend to use.
			We recommend you enable the <ulink url="http://php.net/intl">intl</ulink>,
			<ulink url="http://php.net/simplexml">SimpleXML</ulink> and <ulink url="http://php.net/xsl">XSL</ulink>
			extensions to begin with, along with the extension for the database you intend to use.
			Most common database types are supported.
		</para>
	</sect1>

	<sect1 id="gettingstarted_installation">
		<title>Installation</title>
		<para>
			You can download Web:Extend from <ulink url="http://github.com/essen/wee/downloads">GitHub</ulink>.
			The files can be extracted to a suitable location on your web server.
		</para>
		<para>
			The only configuration required following this is to ensure
			the <filename>app/tmp</filename> folder is writable by the web server.
		</para>
		<para>
			Before beginning any development it is advisable to uncomment the <literal>DEBUG</literal>
			line in the <filename>index.php</filename> file.
		</para>
	</sect1>

	<sect1 id="gettingstarted_layout">
		<title>Directory layout</title>
		<para>
			Every important project must have a well structured directory layout in order to allow continued
			maintenance. A good directory layout enables a team to communicate and work together easily
			and enables newcomers to familiarise themselves with the project in minimal time.
		</para>

		<programlisting> <!-- TODO: image? -->
project/
	app/			Project-specific files.
		cli/		The command-line interface tools for this application.
		conf/		Configuration files of the application.
		form/		The form definitions of the application.
		locale/		The gettext objects for localization.
		php/		The php code of the project, such as code for the frames and model.
		sql/		The database schema, upgrade scripts and other SQL files.
		tmp/		Temporary files generated by the application, including the various cache files.
		tpl/		The templates for the application.
	pub/			A directory for storing any resources directly accessible to the user, like stylesheets and images.
	res/			Public resources distributed with the framework.
	share/
	tools/
	wee/			The Web:Extend framework.
		vendor/		The third party libraries embedded in the framework.
	index.php		The frontend of the application.
		</programlisting>

		<para>
			Directory names should be lowercase and as short as possible.
			Project-specific files should only be located in <filename>app</filename> and <filename>pub</filename>.
			The only folders accessible via the World Wide Web should be <filename>pub</filename>
			and <filename>res</filename>. The bootstrap file <filename>index.php</filename> can be 
			modified to suit the needs of the application.
		</para>

		<para>
			As you can see, the framework does not enforce any layout for your PHP and template files.
			There are several decisions that can be made depending on your application, a few of which we
			will highlight here. Note that if you use the form module, you can use the same layout for
			the forms as you would for the template files.
		</para>

		<sect2>
			<title>Small application layout</title>
			<para>
				If you are writing a small application you'll probably want to keep it as simple as possible.
				For this we recommend the following:
				<itemizedlist>
					<listitem><para>Store all template and form files at the root of their folders</para></listitem>
					<listitem><para>Store the domain model in app/php/model, the frames in app/php/frames
					and the other PHP files directly in app/php</para></listitem>
				</itemizedlist>
			</para>
		</sect2>

		<sect2>
			<title>Modular layout</title>
			<para>
				If your application is modular, you need a more advanced layout.
				For example, you may be constructing a blog application, featuring a separate interface for public 
				and administrative users. These two interfaces are two different parts of your application 
				that do not rely on each other to function correctly. They are only related due to the fact that 
				they operate on the same data, accessed using the domain model classes.
			</para>
			<para>
				As there are two distinct modules within this example, you could store all the related 
				files into their own module folders. This could be achieved with a layout similar to the
				following:
				<programlisting> <!-- TODO: image? -->
app/form/
	admin/
	public/
app/php/
	model/
	admin/
	public/
app/tpl/
	admin/
	public/
				</programlisting>
			</para>
		</sect2>

		<sect2>
			<title>Third party libraries</title>
			<para>
				If you use other external libraries in your project, these can be stored in a folder 
				specific to these libraries within the <filename>app/php/vendor</filename> directory. If for example the
				<ulink url="http://framework.zend.com">Zend Framework</ulink> library is to be used in a project,
				this could be stored in a <filename>app/php/vendor/zendframework</filename> directory.
			</para>
		</sect2>

		<sect2>
			<title>Database versioning</title>
			<para>
				It is highly recommended to keep your database schema under version control.
				You are also advised to keep upgrade scripts from one version to another when you make
				changes to the database schema.	This will mean that applying updates to the project a
				much easier process when working within a team, or when applying any changes to the 
				production environment.
				You can use the folder <filename>app/sql</filename> for this purpose.
			</para>
			<para>
				Numerous software packages exist to provide version control over database schemas, and it
				is advisable to utilise one of these where available. We cannot advise on any particular
				package however, as their advantages can depend on the database system used in your application.
				If this not a desireable option for whatever reason, we recommend the following considerations
				be made:
			</para>
			<para>
				Always record a version with any changes to your database changes. It doesn't have to be the 
				same as the repository version, simply start from version 1 and increment with each change.
				Then when creating any upgrade scripts, include the applicable start version that the script
				will function upon in the filename of the script itself.
			</para>
			<para>
				We recommend using the following naming convention for your SQL files:
				<itemizedlist>
					<listitem><para>Choose a simple name for the schema file, such as <filename>schema.sql
					</filename></para></listitem>
					<listitem><para>Any upgrade files can then be named <filename>upgrade.1.sql</filename>, 
					<filename>upgrade.2.sql</filename> and so on</para></listitem>
				</itemizedlist>
			</para>
			<para>
				When you need to use more than one database, for example with a backend and frontend database,
				the naming convention can be amended in this way:
				<itemizedlist>
					<listitem><para>The schema files could be named	<filename>schema.backend.sql</filename>
					and <filename>schema.frontend.sql</filename> instead of <filename>schema.sql</filename>
					for each schema</para></listitem>
					<listitem><para>Subsequently, <filename>upgrade.backend.1.sql</filename> and
					<filename>upgrade.backend.2.sql</filename> can be used for your upgrade scripts for the
					first schema, along with <filename>upgrade.frontend.x.sql</filename>
					for the second.</para></listitem>
				</itemizedlist>
			</para>
		</sect2>
	</sect1>

	<sect1 id="gettingstarted_helloworld">
		<title>Hello, world</title>
		<para>
			TODO
		</para>
	</sect1>
</chapter>
