<chapter id="standards">
	<title>Coding standards</title>
	<para>
		The <emphasis>coding standards</emphasis> are a set of rules
		and restrictions when writing code for the Web:Extend framework.
		Please follow them when you intend to submit code or patches.
	</para>

	<sect1>
		<title>License</title>
		<para>
			All code must be licensed under the <ulink url="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1 or later</ulink>, or any other compatible license.
			The header of the file must contain the license terms, the name of the product this applies to (for example: a module or a file),
			and the years when the license was in use along with the author's name.
			For example a file created by us in 2006 will have the following line 2 years later: <literal>Copyright (c) 2006-2008 Dev:Extend</literal>.
		</para>
		<para>
			Unless stated otherwise, the submitter keeps copyright over his own code.
		</para>
	</sect1>

	<sect1>
		<title>PHP files</title>
		<para>
			A PHP file must begin with the following lines, with the exception of unit test files.
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-header.php.xml"/>
		</para>
		<para>
			The test on <literal>ALLOW_INCLUSION</literal> prevents the execution
			of the code in the file if it was loaded directly in a web browser.
			The code will only be executed if it is included from a bootstrap file.
		</para>
		<para>
			You must not close the PHP tag using <literal>?&gt;</literal> at the end of the file.
			Closing the tag can introduce bugs into the code if you put too many line breaks after it.
			The reason for this is because PHP will send the subsequent line breaks to the browser,
			preventing you from sending cookies at a later time.
		</para>

		<sect2>
			<title>Short PHP tags</title>
			<para>
				You must not use the shorter versions of the <literal>&lt;?php</literal> tag.
			</para>
			<para>
				Shorthand open tags might be disabled depending on the configuration.
				They also cause trouble when used with XML.
			</para>
		</sect2>
	</sect1>

	<sect1>
		<title>Example URLs</title>
		<para>
			Use the <literal>http://example.com/</literal> URL when you need to give an URL in an example.
			This domain name is reserved for this specific use.
		</para>
	</sect1>

	<sect1>
		<title>Naming conventions</title>
		<para>
			The naming conventions are the same for everything but constants.
		</para>

		<sect2>
			<title>Functions, methods, classes, variables</title>
			<para>
				They should be named using the camel convention.
				The first letter must be in lowercase. For example:
				<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-camel.php.xml"/>
			</para>
		</sect2>

		<sect2>
			<title>Variable types</title>
			<para>
				Variables should be prefixed by the first letter of their type.
				For example, all integers must begin by <literal>i</literal>.
			</para>
			<para>
				Since PHP is loosely typed, we have introduced the <literal>mixed</literal> type
				by convention to indicate that the variable can contain different types.
				With one exception, if a variable can hold multiple types then it is a <emphasis>mixed variable</emphasis>.
			</para>
			<para>
				The only exception to this rule is when you have a <literal>Printable</literal> or <literal>Mappable</literal> object.
				<literal>Printable</literal> objects can be considered either as a string or as an object;
				<literal>Mappable</literal> objects can be considered either as an array or as an object.
				For example, if you write a method accepting both a string or a <literal>Printable</literal>
				object as parameter, the parameter is of the type <emphasis>string</emphasis>.
			</para>
			<para>
				The following table indexes all existing types:
				<table>
					<title>List of variable types</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Type</entry>
								<entry>Prefix</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>Boolean</entry>
								<entry><literal>b</literal></entry>
							</row>
							<row>
								<entry>Exception object</entry>
								<entry><literal>e</literal></entry>
							</row>
							<row>
								<entry>Float</entry>
								<entry><literal>f</literal></entry>
							</row>
							<row>
								<entry>Integer</entry>
								<entry><literal>i</literal></entry>
							</row>
							<row>
								<entry>Mixed</entry>
								<entry><literal>m</literal></entry>
							</row>
							<row>
								<entry>Object</entry>
								<entry><literal>o</literal></entry>
							</row>
							<row>
								<entry>Resource</entry>
								<entry><literal>r</literal></entry>
							</row>
							<row>
								<entry>String</entry>
								<entry><literal>s</literal></entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para>
				Sometimes it makes sense to use the variable name <literal>$i</literal> in a <literal>for</literal> loop.
				However, it never makes sense to name another variable <literal>$j</literal> in another loop inside the first.
				If you need two variables, name them properly.
			</para>
		</sect2>

		<sect2>
			<title>Constants</title>
			<para>
				Constants should always be all-uppercase, with underscores to separate words.
				Prefix constant names with the uppercased name of the module they are a part of (if applicable).
			</para>
		</sect2>

		<sect2>
			<title>Arguments vs parameters</title>
			<para>
				Functions and methods have <emphasis>arguments</emphasis>, not parameters.
				Use the correct word to identify them.
				The only case where you should use the word <emphasis>parameter</emphasis>
				is when talking about arrays of named parameters, like for application drivers.
			</para>
		</sect2>
	</sect1>

	<sect1>
		<title>Silence operator and exceptions</title>
		<para>
			The <emphasis>shut-up operator</emphasis> <literal>@</literal> is allowed only for the following two conditions:
			<itemizedlist>
				<listitem><para>If it makes more sense to throw a specific exception instead of <literal>ErrorException</literal>.</para></listitem>
				<listitem><para>If the target code must never fail. This condition should be very rare.</para></listitem>
			</itemizedlist>
		</para>
		<para>
			It is completely forbidden when combined with an instruction that might include or parse a PHP file.
		</para>
		<para>
			The following rules define how the developer can choose between the various exceptions:
			<itemizedlist>
				<listitem><para>If under normal use of the class the script should be terminated upon encountering a PHP error then use <literal>ErrorException</literal>.</para></listitem>
				<listitem><para>
					If the normal use of the class may require the developer to catch an exception upon an error in a method and continue normally then use a normal exception
					instead of <literal>ErrorException</literal>. Example: <literal>FileNotFoundException</literal>, <literal>BadXMLException</literal>.
				</para></listitem>
				<listitem><para>
					If the normal use of the class require the developer to catch exceptions to determine if an action was successful, then use a custom exception
					for the class/module. Example: <literal>FormValidationException</literal>, <literal>AuthenticationException</literal>, <literal>RouteNotFoundException</literal>.
				</para></listitem>
			</itemizedlist>
		</para>
		<para>
			Only for the last 2 cases the docComment should inform the developer of the exceptions that can be thrown by the function or method.
		</para>
		<para>
			There is no need to check for invalid arguments unless not doing so could result in an illegal state.
			For example, the checks done in <literal>weeAuthDbTable::__construct</literal> must be done because invalid arguments would not prevent
			the construction of the object, despite making the <literal>authenticate</literal> and <literal>authenticateHash</literal> methods always fail,
			thus rendering the object useless.
		</para>
	</sect1>

	<sect1>
		<title>No global variables</title>
		<para>
			Avoid using global variables.
			The <literal>global</literal> keyword and the <literal>$GLOBALS</literal> array are forbidden.
			In the case you really, really must use a global variable, make sure you unset it after using it
			so that no cruft remains when including the file.
		</para>
	</sect1>

	<sect1>
		<title>Duplicate code</title>
		<para>
			Do not refactorise to death.
			It's OK to have the exact same code in two different classes of the framework.
			Do not try to refactor it before there is at least 3 instances of the same code.
		</para>
		<para>
			It also doesn't necessarily make sense to refactor duplicate code when this code only spans 2 or 3 lines,
			unless it is used virtually everywhere in the framework.
		</para>
	</sect1>

	<sect1>
		<title>Comments</title>
		<para>
			Code must be documented using comments.
		</para>
		<para>
			There is two types of comments: docComments and inline comments.
			The first is a block of comments before a function, method, class, or property used to describe it.
			Inline comments are comments present inside a function.
		</para>
		<para>
			DocComments are mandatory.
			They are used to build the API and thus need to be correctly written and
			explain properly the purpose of the item it documents and the different uses for it.
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-doccomment.php.xml"/>
		</para>
		<para>
			Inline comments are completely optional.
			In fact, they should only be used if the PHP code isn't strictly obvious.
			Inline comments ensure that when you come back to your code, you will understand it even if the code's purpose isn't intuitive.
			Use them wisely, too many inline comments is as bad as no inline comments for a complex code.
			Do not assume developers are stupid when you write them.
			On a related note, if you find your code is too hard to explain, you might consider rewriting it.
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-inlinecomment.php.xml"/>
		</para>
		<para>
			Do not use <literal>/* */</literal> or <literal>#</literal> when writing comments.
		</para>
	</sect1>

	<sect1>
		<title>Visibility</title>
		<para>
			Prefer using <literal>protected</literal> instead of <literal>private</literal>.
			Never try to guess that nobody will ever need to extend your classes.
			When the time comes and someone actually need it, they won't be able anymore.
		</para>
	</sect1>

	<sect1>
		<title><literal>__toString</literal> and <literal>Printable</literal></title>
		<para>
			Never use the <literal>__toString</literal> method.
			The reason for this restriction is that throwing an exception in a <literal>__toString</literal> method results in a fatal error.
		</para>
		<para>
			Instead, use the <literal>Printable</literal> interface and the <literal>toString</literal> method.
			Most methods in the framework accept <literal>Printable</literal> objects for string parameters.
		</para>
	</sect1>

	<sect1>
		<title>Arrays, <literal>ArrayAccess</literal> and <literal>Mappable</literal></title>
		<para>
			Beware when using <literal>ArrayAccess</literal>.
			<literal>ArrayAccess</literal> objects are not usable in PHP's array functions and behave unexpectedly when you use them with array operators.
			When you need to represent an array using an object, you should implement the <literal>Mappable</literal> interface.
			This interface defines the method <literal>toArray</literal> used to convert the object's data to an array.
			Most methods in the framework accept <literal>Mappable</literal> objects for array parameters.
		</para>
	</sect1>

	<sect1>
		<title>Standard PHP Library</title>
		<para>
			Use the <ulink url="http://php.net/spl">SPL</ulink> only where it makes sense.
			While there's generally no problem using the <literal>ArrayAccess</literal> or <literal>Iterator</literal> interfaces,
			some of the classes can prove to be impractical.
			If your project requires performance, you will want to avoid using <literal>DirectoryIterator</literal> objects, for example.
			If you are going to only use 2 methods of an SPL object, you might want to use low level functions instead.
			Always make sure you understand the pros and cons of the class you use.
		</para>
	</sect1>

	<sect1>
		<title>Autoload</title>
		<para>
			Do not include files yourself. Autoload will load them for you.
		</para>
		<para>
			The only time you'll need to include files is when using third-party libraries.
			In that case, you should use the <ulink url="http://php.net/require">require function</ulink> instead of the 3 others.
		</para>
		<para>
			Autoload expects filenames to match this pattern: <literal>nameOfTheClass.class.php</literal>.
			Name your files accordingly, and only include one class per file (except when you want to prevent direct use of a class).
		</para>
	</sect1>

	<sect1>
		<title>Echo, don't print</title>
		<para>
			Use <literal>echo</literal> instead of <literal>print</literal>.
			No specific reasons other than <literal>echo</literal> can be used
			with multiple arguments that will get concatenated before being printed.
			It's also better to use only one of the two for consistency.
		</para>
	</sect1>

	<sect1>
		<title>Do not return error codes, throw exceptions</title>
		<para>
			Functions and methods in the framework should never return an error code
			(unless it's the function's purpose to return it, as shown in its name; for example <literal>getLastError</literal>).
		</para>
		<para>
			When an error occurs, throw an exception.
			The developer will then have the choice to catch it or not,
			and will not have to ensure the data returned is actually data and not an error.
			If the developer doesn't catch an exception, an error page will be printed.
		</para>
	</sect1>

	<sect1>
		<title>Put the default values at the end of the arguments list</title>
		<para>
			Arguments with a default value should always be last in the function's argument list.
			For example, this is good:
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-args-good.php.xml"/>
		</para>
		<para>
			And this is bad:
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-args-bad.php.xml"/>
		</para>
		<para>
			Doing it improperly effectively make the default value useless.
		</para>
	</sect1>

	<sect1 id="standards_array_comma">
		<title>Add a comma at the end of the array</title>
		<para>
			When an array definition spans multiple lines, always add a comma at the end.
			This will help prevent parsing errors when adding another element in the array.
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-array-comma.php.xml"/>
		</para>
	</sect1>

	<sect1>
		<title>If, else, elseif</title>
		<para>
			If a condition doesn't require curly braces, prefer writing it on the front of the block,
			on the first <literal>if</literal>, to make it easier to read. For example, this is good:
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-if-good.php.xml"/>
		</para>
		<para>
			And this is bad:
			<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="examples/build/php-if-bad.php.xml"/>
		</para>
		<para>
			Use operators instead of their textual equivalents (prefer <literal>&amp;&amp;</literal> over <literal>and</literal>, for example).
		</para>
	</sect1>

	<sect1>
		<title>Switch</title>
		<para>
			Do not use switch statements where it doesn't make sense.
			It only makes sense if you have a big number of conditions.
		</para>
		<para>
			When possible, try to order the conditions so that it's easier to read.
			If you use <literal>return</literal> or <literal>throw</literal> at the end of a condition,
			you must not add a <literal>break</literal> after (because it will never be reached).
			Try to ensure that every condition has either a <literal>return</literal>,
			<literal>throw</literal> or <literal>break</literal>. It makes things much more readable.
		</para>
	</sect1>

	<sect1>
		<title>Quotes</title>
		<para>
			Use single quotes instead of double quotes whenever possible.
		</para>
		<para>
			When you have to use double quotes, you should not use a variable inside of them.
			Prefer a concatenation instead.
		</para>
	</sect1>

	<sect1>
		<title>Line breaks</title>
		<para>
			Use Unix-style line breaks (<literal>\n</literal>) instead of the Windows-style
			(<literal>\r\n</literal>) or Mac-style (<literal>\r</literal>), to prevent errors.
		</para>
	</sect1>
</chapter>
